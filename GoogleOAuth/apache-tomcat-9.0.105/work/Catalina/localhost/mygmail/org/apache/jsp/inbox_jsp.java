/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-05-16 01:01:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class inbox_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"vi\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>Hộp thư đến | Inbox</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: Arial, sans-serif;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      background-color: #f5f5f5;\r\n");
      out.write("    }\r\n");
      out.write("    .container {\r\n");
      out.write("      max-width: 1200px;\r\n");
      out.write("      margin: 0 auto;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .header {\r\n");
      out.write("      background-color: #4285f4;\r\n");
      out.write("      color: white;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      border-radius: 5px 5px 0 0;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      justify-content: space-between;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("    .header h1 {\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      font-size: 24px;\r\n");
      out.write("    }\r\n");
      out.write("    .controls {\r\n");
      out.write("      margin: 15px 0;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      gap: 10px;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("    .btn {\r\n");
      out.write("      padding: 8px 16px;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      transition: background-color 0.3s;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary {\r\n");
      out.write("      background-color: #4285f4;\r\n");
      out.write("      color: white;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary:hover {\r\n");
      out.write("      background-color: #3367d6;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-secondary {\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("      color: #3c4043;\r\n");
      out.write("      border: 1px solid #dadce0;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-secondary:hover {\r\n");
      out.write("      background-color: #f1f3f4;\r\n");
      out.write("    }\r\n");
      out.write("    .btn:disabled {\r\n");
      out.write("      background-color: #dadce0;\r\n");
      out.write("      color: #80868b;\r\n");
      out.write("      cursor: not-allowed;\r\n");
      out.write("    }\r\n");
      out.write("    .language-selector {\r\n");
      out.write("      margin-left: auto;\r\n");
      out.write("    }\r\n");
      out.write("    .content {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      height: 70vh;\r\n");
      out.write("      background-color: white;\r\n");
      out.write("      border-radius: 0 0 5px 5px;\r\n");
      out.write("      box-shadow: 0 1px 3px rgba(0,0,0,0.12);\r\n");
      out.write("    }\r\n");
      out.write("    .message-list {\r\n");
      out.write("      flex: 1;\r\n");
      out.write("      border-right: 1px solid #dadce0;\r\n");
      out.write("      overflow-y: auto;\r\n");
      out.write("    }\r\n");
      out.write("    .message-content {\r\n");
      out.write("      flex: 2;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      overflow-y: auto;\r\n");
      out.write("    }\r\n");
      out.write("    ul#emails {\r\n");
      out.write("      list-style: none;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("    }\r\n");
      out.write("    ul#emails li {\r\n");
      out.write("      padding: 12px 15px;\r\n");
      out.write("      border-bottom: 1px solid #dadce0;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      transition: background-color 0.2s;\r\n");
      out.write("    }\r\n");
      out.write("    ul#emails li:hover {\r\n");
      out.write("      background-color: #f1f3f4;\r\n");
      out.write("    }\r\n");
      out.write("    ul#emails li.active {\r\n");
      out.write("      background-color: #e8f0fe;\r\n");
      out.write("      border-left: 4px solid #4285f4;\r\n");
      out.write("    }\r\n");
      out.write("    .email-subject {\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      margin-bottom: 5px;\r\n");
      out.write("      white-space: nowrap;\r\n");
      out.write("      overflow: hidden;\r\n");
      out.write("      text-overflow: ellipsis;\r\n");
      out.write("    }\r\n");
      out.write("    .email-snippet {\r\n");
      out.write("      color: #5f6368;\r\n");
      out.write("      font-size: 13px;\r\n");
      out.write("      white-space: nowrap;\r\n");
      out.write("      overflow: hidden;\r\n");
      out.write("      text-overflow: ellipsis;\r\n");
      out.write("    }\r\n");
      out.write("    #content {\r\n");
      out.write("      white-space: pre-wrap;\r\n");
      out.write("      font-family: Arial, sans-serif;\r\n");
      out.write("      line-height: 1.5;\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .loading {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      height: 100%;\r\n");
      out.write("    }\r\n");
      out.write("    .loading-spinner {\r\n");
      out.write("      border: 4px solid #f3f3f3;\r\n");
      out.write("      border-top: 4px solid #4285f4;\r\n");
      out.write("      border-radius: 50%;\r\n");
      out.write("      width: 30px;\r\n");
      out.write("      height: 30px;\r\n");
      out.write("      animation: spin 1s linear infinite;\r\n");
      out.write("    }\r\n");
      out.write("    @keyframes spin {\r\n");
      out.write("      0% { transform: rotate(0deg); }\r\n");
      out.write("      100% { transform: rotate(360deg); }\r\n");
      out.write("    }\r\n");
      out.write("    .notification {\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      margin: 10px 0;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    .error {\r\n");
      out.write("      background-color: #fdecea;\r\n");
      out.write("      color: #c5221f;\r\n");
      out.write("      border: 1px solid #f5c2c0;\r\n");
      out.write("    }\r\n");
      out.write("    .empty-message {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      flex-direction: column;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      height: 100%;\r\n");
      out.write("      color: #5f6368;\r\n");
      out.write("    }\r\n");
      out.write("    /* Pagination styles */\r\n");
      out.write("    .pagination {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      gap: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .page-info {\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      min-width: 60px;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    .page-jump {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      gap: 5px;\r\n");
      out.write("      margin-left: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .page-jump input {\r\n");
      out.write("      width: 40px;\r\n");
      out.write("      padding: 5px;\r\n");
      out.write("      border: 1px solid #dadce0;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    .page-jump button {\r\n");
      out.write("      padding: 5px 10px;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("  <script>\r\n");
      out.write("    // Language strings\r\n");
      out.write("    const translations = {\r\n");
      out.write("      'en': {\r\n");
      out.write("        'inbox': 'Inbox',\r\n");
      out.write("        'refresh': 'Refresh',\r\n");
      out.write("        'compose': 'Compose',\r\n");
      out.write("        'loading': 'Loading emails...',\r\n");
      out.write("        'noEmails': 'No emails found',\r\n");
      out.write("        'errorLoading': 'Error loading emails',\r\n");
      out.write("        'errorContent': 'Error loading email content',\r\n");
      out.write("        'selectPrompt': 'Select an email to view its content',\r\n");
      out.write("        'prev': '« Previous',\r\n");
      out.write("        'next': 'Next »',\r\n");
      out.write("        'page': 'Page',\r\n");
      out.write("        'of': 'of',\r\n");
      out.write("        'go': 'Go',\r\n");
      out.write("        'goToPage': 'Go to page'\r\n");
      out.write("      },\r\n");
      out.write("      'vi': {\r\n");
      out.write("        'inbox': 'Hộp thư đến',\r\n");
      out.write("        'refresh': 'Làm mới',\r\n");
      out.write("        'compose': 'Soạn thư mới',\r\n");
      out.write("        'loading': 'Đang tải email...',\r\n");
      out.write("        'noEmails': 'Không tìm thấy email nào',\r\n");
      out.write("        'errorLoading': 'Lỗi khi tải email',\r\n");
      out.write("        'errorContent': 'Lỗi khi tải nội dung email',\r\n");
      out.write("        'selectPrompt': 'Chọn một email để xem nội dung',\r\n");
      out.write("        'prev': '« Trước',\r\n");
      out.write("        'next': 'Sau »',\r\n");
      out.write("        'page': 'Trang',\r\n");
      out.write("        'of': 'trên',\r\n");
      out.write("        'go': 'Đi đến',\r\n");
      out.write("        'goToPage': 'Đi đến trang'\r\n");
      out.write("      }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    let currentLanguage = 'vi';\r\n");
      out.write("\r\n");
      out.write("    function translate(key) {\r\n");
      out.write("      return translations[currentLanguage][key] || key;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function changeLanguage(lang) {\r\n");
      out.write("      currentLanguage = lang;\r\n");
      out.write("      updateUI();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateUI() {\r\n");
      out.write("      document.title = translate('inbox');\r\n");
      out.write("      document.querySelector('.header h1').textContent = translate('inbox');\r\n");
      out.write("      document.getElementById('refresh-btn').textContent = translate('refresh');\r\n");
      out.write("      document.getElementById('compose-link').textContent = translate('compose');\r\n");
      out.write("      document.getElementById('prev-btn').textContent = translate('prev');\r\n");
      out.write("      document.getElementById('next-btn').textContent = translate('next');\r\n");
      out.write("      document.getElementById('go-btn').textContent = translate('go');\r\n");
      out.write("      document.getElementById('jump-label').textContent = translate('goToPage');\r\n");
      out.write("\r\n");
      out.write("      // Update content if it's the default prompt\r\n");
      out.write("      if (document.getElementById('content').classList.contains('select-prompt')) {\r\n");
      out.write("        document.getElementById('content').textContent = translate('selectPrompt');\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Update loading message if present\r\n");
      out.write("      const loadingEl = document.querySelector('.loading p');\r\n");
      out.write("      if (loadingEl) {\r\n");
      out.write("        loadingEl.textContent = translate('loading');\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Pagination state\r\n");
      out.write("    let currentPage = 1;\r\n");
      out.write("    const pageSize = 10;\r\n");
      out.write("    let totalPages = 1;\r\n");
      out.write("    let totalEmails = 0;\r\n");
      out.write("\r\n");
      out.write("    async function loadList(page = 1) {\r\n");
      out.write("      currentPage = page;\r\n");
      out.write("      const emailsList = document.getElementById('emails');\r\n");
      out.write("      emailsList.innerHTML = `<div class=\"loading\"><div class=\"loading-spinner\"></div><p>${translate('loading')}</p></div>`;\r\n");
      out.write("      emailsList.classList.add('loading');\r\n");
      out.write("\r\n");
      out.write("      try {\r\n");
      out.write("        const res = await fetch(`api/list?page=${page}&size=${pageSize}`);\r\n");
      out.write("        if (!res.ok) throw new Error('HTTP error! status: ' + res.status);\r\n");
      out.write("\r\n");
      out.write("        const data = await res.json();\r\n");
      out.write("        emailsList.classList.remove('loading');\r\n");
      out.write("        emailsList.innerHTML = '';\r\n");
      out.write("\r\n");
      out.write("        // Update pagination info\r\n");
      out.write("        totalEmails = data.totalCount || 0;\r\n");
      out.write("        totalPages = Math.max(Math.ceil(totalEmails / pageSize), 1);\r\n");
      out.write("        document.getElementById('page-info').textContent = `${currentPage}/${totalPages}`;\r\n");
      out.write("        document.getElementById('prev-btn').disabled = currentPage <= 1;\r\n");
      out.write("        document.getElementById('next-btn').disabled = currentPage >= totalPages;\r\n");
      out.write("        document.getElementById('page-input').max = totalPages;\r\n");
      out.write("        document.getElementById('page-input').placeholder = currentPage;\r\n");
      out.write("\r\n");
      out.write("        if (data.messages && data.messages.length > 0) {\r\n");
      out.write("          data.messages.forEach(m => {\r\n");
      out.write("            const li = document.createElement('li');\r\n");
      out.write("            li.setAttribute('data-id', m.id);\r\n");
      out.write("            let subject = \"No Subject\";\r\n");
      out.write("            if (m.payload && m.payload.headers) {\r\n");
      out.write("              const subjectHeader = m.payload.headers.find(h => h.name.toLowerCase() === 'subject');\r\n");
      out.write("              if (subjectHeader) subject = subjectHeader.value;\r\n");
      out.write("            }\r\n");
      out.write("            const snippet = m.snippet || \"\";\r\n");
      out.write("            li.innerHTML = `\r\n");
      out.write("              <div class=\"email-subject\">${escapeHtml(subject)}</div>\r\n");
      out.write("              <div class=\"email-snippet\">${escapeHtml(snippet)}</div>\r\n");
      out.write("            `;\r\n");
      out.write("            li.onclick = function() {\r\n");
      out.write("              document.querySelectorAll('#emails li').forEach(item => item.classList.remove('active'));\r\n");
      out.write("              this.classList.add('active');\r\n");
      out.write("              loadEmail(m.id);\r\n");
      out.write("            };\r\n");
      out.write("            emailsList.appendChild(li);\r\n");
      out.write("          });\r\n");
      out.write("        } else {\r\n");
      out.write("          emailsList.innerHTML = `<div class=\"empty-message\"><p>${translate('noEmails')}</p></div>`;\r\n");
      out.write("        }\r\n");
      out.write("      } catch (error) {\r\n");
      out.write("        emailsList.classList.remove('loading');\r\n");
      out.write("        emailsList.innerHTML = `<div class=\"notification error\"><p>${translate('errorLoading')}</p><p>${error.message}</p></div>`;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    async function loadEmail(id) {\r\n");
      out.write("      const contentDiv = document.getElementById('content');\r\n");
      out.write("      contentDiv.innerHTML = '<div class=\"loading\"><div class=\"loading-spinner\"></div></div>';\r\n");
      out.write("      contentDiv.classList.remove('select-prompt');\r\n");
      out.write("\r\n");
      out.write("      try {\r\n");
      out.write("        const res = await fetch('api/get?id=' + encodeURIComponent(id));\r\n");
      out.write("        if (!res.ok) throw new Error('HTTP error! status: ' + res.status);\r\n");
      out.write("        const json = await res.json();\r\n");
      out.write("        contentDiv.innerText = json.body || \"No content available\";\r\n");
      out.write("      } catch (error) {\r\n");
      out.write("        contentDiv.innerHTML = `<div class=\"notification error\"><p>${translate('errorContent')}</p><p>${error.message}</p></div>`;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function escapeHtml(unsafe) {\r\n");
      out.write("      return unsafe\r\n");
      out.write("        .replace(/&/g, \"&amp;\")\r\n");
      out.write("        .replace(/</g, \"&lt;\")\r\n");
      out.write("        .replace(/>/g, \"&gt;\")\r\n");
      out.write("        .replace(/\"/g, \"&quot;\")\r\n");
      out.write("        .replace(/'/g, \"&#039;\");\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function goToPage() {\r\n");
      out.write("      const pageInput = document.getElementById('page-input');\r\n");
      out.write("      let page = parseInt(pageInput.value);\r\n");
      out.write("      if (isNaN(page) || page < 1) {\r\n");
      out.write("        page = 1;\r\n");
      out.write("      } else if (page > totalPages) {\r\n");
      out.write("        page = totalPages;\r\n");
      out.write("      }\r\n");
      out.write("      loadList(page);\r\n");
      out.write("      pageInput.value = '';  // Clear input after use\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    window.onload = function() {\r\n");
      out.write("      updateUI();\r\n");
      out.write("      loadList();\r\n");
      out.write("      document.getElementById('lang-en').addEventListener('click', () => changeLanguage('en'));\r\n");
      out.write("      document.getElementById('lang-vi').addEventListener('click', () => changeLanguage('vi'));\r\n");
      out.write("      document.getElementById('prev-btn').addEventListener('click', () => loadList(currentPage - 1));\r\n");
      out.write("      document.getElementById('next-btn').addEventListener('click', () => loadList(currentPage + 1));\r\n");
      out.write("      document.getElementById('go-btn').addEventListener('click', goToPage);\r\n");
      out.write("\r\n");
      out.write("      // Allow pressing Enter in the page input\r\n");
      out.write("      document.getElementById('page-input').addEventListener('keypress', function(e) {\r\n");
      out.write("        if (e.key === 'Enter') {\r\n");
      out.write("          goToPage();\r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("    };\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <div class=\"header\">\r\n");
      out.write("      <h1>Hộp thư đến</h1>\r\n");
      out.write("      <div class=\"language-selector\">\r\n");
      out.write("        <button id=\"lang-en\" class=\"btn btn-secondary\">English</button>\r\n");
      out.write("        <button id=\"lang-vi\" class=\"btn btn-secondary\">Tiếng Việt</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"controls\">\r\n");
      out.write("      <button id=\"refresh-btn\" class=\"btn btn-primary\" onclick=\"loadList(currentPage)\">Làm mới</button>\r\n");
      out.write("      <a id=\"compose-link\" href=\"compose.jsp\" class=\"btn btn-secondary\">Soạn thư mới</a>\r\n");
      out.write("      <div class=\"pagination\">\r\n");
      out.write("        <button id=\"prev-btn\" class=\"btn btn-secondary\" disabled>&laquo; Trước</button>\r\n");
      out.write("        <span class=\"page-info\" id=\"page-info\">1/1</span>\r\n");
      out.write("        <button id=\"next-btn\" class=\"btn btn-secondary\" disabled>Sau &raquo;</button>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"page-jump\">\r\n");
      out.write("          <label id=\"jump-label\" for=\"page-input\">Đi đến trang</label>\r\n");
      out.write("          <input type=\"number\" id=\"page-input\" min=\"1\" placeholder=\"1\">\r\n");
      out.write("          <button id=\"go-btn\" class=\"btn btn-secondary\">Đi đến</button>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("      <div class=\"message-list\">\r\n");
      out.write("        <ul id=\"emails\">\r\n");
      out.write("          <div class=\"loading\">\r\n");
      out.write("            <div class=\"loading-spinner\"></div>\r\n");
      out.write("            <p>Đang tải email...</p>\r\n");
      out.write("          </div>\r\n");
      out.write("        </ul>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"message-content\">\r\n");
      out.write("        <pre id=\"content\" class=\"select-prompt\">Chọn một email để xem nội dung</pre>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
