/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-05-16 00:53:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class compose_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"vi\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>Soạn thư mới | Compose</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: Arial, sans-serif;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      background-color: #f5f5f5;\r\n");
      out.write("    }\r\n");
      out.write("    .container {\r\n");
      out.write("      max-width: 900px;\r\n");
      out.write("      margin: 0 auto;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .header {\r\n");
      out.write("      background-color: #4285f4;\r\n");
      out.write("      color: white;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      border-radius: 5px 5px 0 0;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      justify-content: space-between;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("    .header h1 {\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      font-size: 24px;\r\n");
      out.write("    }\r\n");
      out.write("    .language-selector {\r\n");
      out.write("      margin-left: auto;\r\n");
      out.write("    }\r\n");
      out.write("    .compose-form {\r\n");
      out.write("      background-color: white;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("      border-radius: 0 0 5px 5px;\r\n");
      out.write("      box-shadow: 0 1px 3px rgba(0,0,0,0.12);\r\n");
      out.write("    }\r\n");
      out.write("    .form-group {\r\n");
      out.write("      margin-bottom: 15px;\r\n");
      out.write("    }\r\n");
      out.write("    label {\r\n");
      out.write("      display: block;\r\n");
      out.write("      margin-bottom: 5px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("    }\r\n");
      out.write("    input[type=\"text\"], input[type=\"email\"], textarea {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 8px;\r\n");
      out.write("      border: 1px solid #dadce0;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      box-sizing: border-box;\r\n");
      out.write("      font-family: inherit;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("    }\r\n");
      out.write("    textarea {\r\n");
      out.write("      min-height: 200px;\r\n");
      out.write("      resize: vertical;\r\n");
      out.write("    }\r\n");
      out.write("    .btn {\r\n");
      out.write("      padding: 10px 20px;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      transition: background-color 0.3s;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary {\r\n");
      out.write("      background-color: #4285f4;\r\n");
      out.write("      color: white;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-primary:hover {\r\n");
      out.write("      background-color: #3367d6;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-secondary {\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("      color: #3c4043;\r\n");
      out.write("      border: 1px solid #dadce0;\r\n");
      out.write("      margin-right: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .btn-secondary:hover {\r\n");
      out.write("      background-color: #f1f3f4;\r\n");
      out.write("    }\r\n");
      out.write("    .buttons {\r\n");
      out.write("      margin-top: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .file-input {\r\n");
      out.write("      display: none;\r\n");
      out.write("    }\r\n");
      out.write("    .file-label {\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      padding: 8px 16px;\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("      color: #3c4043;\r\n");
      out.write("      border: 1px solid #dadce0;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      margin-right: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .file-label:hover {\r\n");
      out.write("      background-color: #f1f3f4;\r\n");
      out.write("    }\r\n");
      out.write("    .file-info {\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      margin-left: 10px;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      color: #5f6368;\r\n");
      out.write("    }\r\n");
      out.write("    .notification {\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      margin: 10px 0;\r\n");
      out.write("      border-radius: 4px;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      display: none;\r\n");
      out.write("    }\r\n");
      out.write("    .success {\r\n");
      out.write("      background-color: #e6f4ea;\r\n");
      out.write("      color: #137333;\r\n");
      out.write("      border: 1px solid #ceead6;\r\n");
      out.write("    }\r\n");
      out.write("    .error {\r\n");
      out.write("      background-color: #fdecea;\r\n");
      out.write("      color: #c5221f;\r\n");
      out.write("      border: 1px solid #f5c2c0;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("  <script>\r\n");
      out.write("    // Language strings\r\n");
      out.write("    const translations = {\r\n");
      out.write("      'en': {\r\n");
      out.write("        'compose': 'Compose New Email',\r\n");
      out.write("        'to': 'To',\r\n");
      out.write("        'subject': 'Subject',\r\n");
      out.write("        'body': 'Message',\r\n");
      out.write("        'attach': 'Attach File',\r\n");
      out.write("        'noFileSelected': 'No file selected',\r\n");
      out.write("        'send': 'Send',\r\n");
      out.write("        'cancel': 'Cancel',\r\n");
      out.write("        'sending': 'Sending...',\r\n");
      out.write("        'successMsg': 'Email sent successfully!',\r\n");
      out.write("        'errorMsg': 'Error sending email.',\r\n");
      out.write("        'requiredFields': 'Please fill in all required fields.',\r\n");
      out.write("        'backToInbox': 'Back to Inbox'\r\n");
      out.write("      },\r\n");
      out.write("      'vi': {\r\n");
      out.write("        'compose': 'Soạn thư mới',\r\n");
      out.write("        'to': 'Người nhận',\r\n");
      out.write("        'subject': 'Tiêu đề',\r\n");
      out.write("        'body': 'Nội dung',\r\n");
      out.write("        'attach': 'Đính kèm tệp',\r\n");
      out.write("        'noFileSelected': 'Chưa chọn tệp nào',\r\n");
      out.write("        'send': 'Gửi',\r\n");
      out.write("        'cancel': 'Hủy',\r\n");
      out.write("        'sending': 'Đang gửi...',\r\n");
      out.write("        'successMsg': 'Email đã được gửi thành công!',\r\n");
      out.write("        'errorMsg': 'Lỗi khi gửi email.',\r\n");
      out.write("        'requiredFields': 'Vui lòng điền đầy đủ các trường bắt buộc.',\r\n");
      out.write("        'backToInbox': 'Quay lại Hộp thư đến'\r\n");
      out.write("      }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    let currentLanguage = 'vi'; // Default language\r\n");
      out.write("\r\n");
      out.write("    function translate(key) {\r\n");
      out.write("      return translations[currentLanguage][key] || translations['en'][key] || key;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function changeLanguage(lang) {\r\n");
      out.write("      currentLanguage = lang;\r\n");
      out.write("      updateUI();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateUI() {\r\n");
      out.write("      // Update all translated elements\r\n");
      out.write("      document.title = translate('compose');\r\n");
      out.write("      document.querySelector('.header h1').textContent = translate('compose');\r\n");
      out.write("      document.querySelector('label[for=\"to\"]').textContent = translate('to');\r\n");
      out.write("      document.querySelector('label[for=\"subject\"]').textContent = translate('subject');\r\n");
      out.write("      document.querySelector('label[for=\"body\"]').textContent = translate('body');\r\n");
      out.write("      document.querySelector('.file-label').textContent = translate('attach');\r\n");
      out.write("      document.querySelector('#send-btn').textContent = translate('send');\r\n");
      out.write("      document.querySelector('#cancel-btn').textContent = translate('cancel');\r\n");
      out.write("      document.querySelector('#back-to-inbox').textContent = translate('backToInbox');\r\n");
      out.write("\r\n");
      out.write("      // Update file info if needed\r\n");
      out.write("      const fileInput = document.getElementById('file');\r\n");
      out.write("      const fileInfo = document.getElementById('file-info');\r\n");
      out.write("      if (fileInput.files.length > 0) {\r\n");
      out.write("        fileInfo.textContent = fileInput.files[0].name;\r\n");
      out.write("      } else {\r\n");
      out.write("        fileInfo.textContent = translate('noFileSelected');\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    async function sendEmail(event) {\r\n");
      out.write("      event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("      const toField = document.getElementById('to');\r\n");
      out.write("      const subjectField = document.getElementById('subject');\r\n");
      out.write("      const bodyField = document.getElementById('body');\r\n");
      out.write("      const notification = document.getElementById('notification');\r\n");
      out.write("\r\n");
      out.write("      // Validate required fields\r\n");
      out.write("      if (!toField.value || !subjectField.value || !bodyField.value) {\r\n");
      out.write("        notification.textContent = translate('requiredFields');\r\n");
      out.write("        notification.className = 'notification error';\r\n");
      out.write("        notification.style.display = 'block';\r\n");
      out.write("        return;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Form data for the API call\r\n");
      out.write("      const formData = new FormData(document.getElementById('compose-form'));\r\n");
      out.write("\r\n");
      out.write("      // Update the button text and disable it\r\n");
      out.write("      const sendBtn = document.getElementById('send-btn');\r\n");
      out.write("      const originalText = sendBtn.textContent;\r\n");
      out.write("      sendBtn.textContent = translate('sending');\r\n");
      out.write("      sendBtn.disabled = true;\r\n");
      out.write("\r\n");
      out.write("      try {\r\n");
      out.write("        const response = await fetch('api/send', {\r\n");
      out.write("          method: 'POST',\r\n");
      out.write("          body: formData\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        if (!response.ok) {\r\n");
      out.write("          const errorData = await response.json();\r\n");
      out.write("          throw new Error(errorData.error || 'Server error');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Show success notification\r\n");
      out.write("        notification.textContent = translate('successMsg');\r\n");
      out.write("        notification.className = 'notification success';\r\n");
      out.write("        notification.style.display = 'block';\r\n");
      out.write("\r\n");
      out.write("        // Reset form\r\n");
      out.write("        document.getElementById('compose-form').reset();\r\n");
      out.write("        document.getElementById('file-info').textContent = translate('noFileSelected');\r\n");
      out.write("\r\n");
      out.write("        // Redirect to inbox after short delay\r\n");
      out.write("        setTimeout(() => {\r\n");
      out.write("          window.location.href = 'inbox.jsp';\r\n");
      out.write("        }, 2000);\r\n");
      out.write("\r\n");
      out.write("      } catch (error) {\r\n");
      out.write("        console.error('Error sending email:', error);\r\n");
      out.write("        notification.textContent = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${translations[currentLanguage]['errorMsg'] || translations['en']['errorMsg'] || 'Error sending email.'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${error.message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("        notification.className = 'notification error';\r\n");
      out.write("        notification.style.display = 'block';\r\n");
      out.write("      } finally {\r\n");
      out.write("        // Re-enable the button\r\n");
      out.write("        sendBtn.textContent = originalText;\r\n");
      out.write("        sendBtn.disabled = false;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateFileInfo() {\r\n");
      out.write("      const fileInput = document.getElementById('file');\r\n");
      out.write("      const fileInfo = document.getElementById('file-info');\r\n");
      out.write("\r\n");
      out.write("      if (fileInput.files.length > 0) {\r\n");
      out.write("        fileInfo.textContent = fileInput.files[0].name;\r\n");
      out.write("      } else {\r\n");
      out.write("        fileInfo.textContent = translate('noFileSelected');\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    window.onload = function() {\r\n");
      out.write("      updateUI();\r\n");
      out.write("\r\n");
      out.write("      // Set up language switcher\r\n");
      out.write("      document.getElementById('lang-en').addEventListener('click', () => changeLanguage('en'));\r\n");
      out.write("      document.getElementById('lang-vi').addEventListener('click', () => changeLanguage('vi'));\r\n");
      out.write("\r\n");
      out.write("      // Set up file input change event\r\n");
      out.write("      document.getElementById('file').addEventListener('change', updateFileInfo);\r\n");
      out.write("\r\n");
      out.write("      // Set up form submission\r\n");
      out.write("      document.getElementById('compose-form').addEventListener('submit', sendEmail);\r\n");
      out.write("    };\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <div class=\"header\">\r\n");
      out.write("      <h1>Soạn thư mới</h1>\r\n");
      out.write("      <div class=\"language-selector\">\r\n");
      out.write("        <button id=\"lang-en\" class=\"btn btn-secondary\">English</button>\r\n");
      out.write("        <button id=\"lang-vi\" class=\"btn btn-secondary\">Tiếng Việt</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"notification\" class=\"notification\"></div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"compose-form\">\r\n");
      out.write("      <form id=\"compose-form\" action=\"api/send\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("          <label for=\"to\">Người nhận</label>\r\n");
      out.write("          <input type=\"email\" id=\"to\" name=\"to\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("          <label for=\"subject\">Tiêu đề</label>\r\n");
      out.write("          <input type=\"text\" id=\"subject\" name=\"subject\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("          <label for=\"body\">Nội dung</label>\r\n");
      out.write("          <textarea id=\"body\" name=\"body\" required></textarea>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("          <input type=\"file\" id=\"file\" name=\"file\" class=\"file-input\">\r\n");
      out.write("          <label for=\"file\" class=\"file-label\">Đính kèm tệp</label>\r\n");
      out.write("          <span id=\"file-info\" class=\"file-info\">Chưa chọn tệp nào</span>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"buttons\">\r\n");
      out.write("          <button type=\"submit\" id=\"send-btn\" class=\"btn btn-primary\">Gửi</button>\r\n");
      out.write("          <button type=\"button\" id=\"cancel-btn\" class=\"btn btn-secondary\" onclick=\"window.location.href='inbox.jsp'\">Hủy</button>\r\n");
      out.write("          <a href=\"inbox.jsp\" id=\"back-to-inbox\" class=\"btn btn-secondary\">Quay lại Hộp thư đến</a>\r\n");
      out.write("        </div>\r\n");
      out.write("      </form>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
